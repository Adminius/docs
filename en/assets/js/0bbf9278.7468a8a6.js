"use strict";(self.webpackChunkevcc_docs=self.webpackChunkevcc_docs||[]).push([[8266],{3794:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(7462),i=(n(7294),n(3905));n(8209);const r={sidebar_position:4},a="Modbus",s={unversionedId:"reference/modbus",id:"reference/modbus",title:"Modbus",description:"Some devices, such as meters (meters) or chargers (chargers), are connected and addressed using the Modbus protocol.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/reference/modbus.md",sourceDirName:"reference",slug:"/reference/modbus",permalink:"/en/docs/reference/modbus",draft:!1,editUrl:"https://github.com/evcc-io/docs/tree/main/i18n/en/docusaurus-plugin-content-docs/current/reference/modbus.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/en/docs/reference/plugins"},next:{title:"API",permalink:"/en/docs/reference/api"}},c={},d=[{value:"Physical Connection",id:"physical-connection",level:2},{value:"Serial Connection (RS485)",id:"serial-connection-rs485",level:3},{value:"Direct Network Connection",id:"direct-network-connection",level:3},{value:"Serial Device via Network Connection (with Interface Converter)",id:"serial-device-via-network-connection-with-interface-converter",level:3},{value:"Predefined Devices",id:"predefined-devices",level:2},{value:"Manual Configuration",id:"manual-configuration",level:2},{value:"Writing Registers",id:"writing-registers",level:3}],l={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modbus"},"Modbus"),(0,i.kt)("p",null,"Some devices, such as meters (",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/configuration/meters#modbus"},(0,i.kt)("inlineCode",{parentName:"a"},"meters")),") or chargers (",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/configuration/chargers"},(0,i.kt)("inlineCode",{parentName:"a"},"chargers")),"), are connected and addressed using the Modbus protocol."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"meter")," configuration includes the type of physical connection (interface), optional technical interface parameters, the Modbus protocol used, the unique Modbus ID of the device on the bus, and the number and type of the register to be read or written."),(0,i.kt)("p",null,"It is important to note that there are three different Modbus protocols: Modbus RTU, Modbus ASCII, and Modbus TCP. These can technically be transmitted over different types of interfaces. The classic version is Modbus RTU over a serial RS485 bus interface, commonly used with most meters or some chargers. Devices with a native network interface (Ethernet/WiFi), on the other hand, are typically addressed using the Modbus TCP protocol."),(0,i.kt)("p",null,'If a serial Modbus device needs to be connected through an interface converter via a network (Ethernet/WiFi/PowerLAN), Modbus RTU protocol over a TCP/IP connection is established. The Modbus RTU protocol is directly transmitted over the network (i.e., "tunnelled"). Even though the transport method (TCP/IP) is the same, the protocol is NOT the same as Modbus TCP. It\'s essential to distinguish between the protocol and the transport method. "Modbus (RTU) over TCP" is different from Modbus TCP!'),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Caution: There are more complex interface converters that can optionally translate the Modbus protocol itself between Modbus RTU and Modbus TCP!\nIf this feature is active, evcc must communicate with the converter using Modbus TCP, while the converter communicates with the serial device via Modbus RTU and bidirectionally translates the two protocols.\nIn this case, careful attention must be paid to the device specification and configuration; otherwise, communication might not work!")),(0,i.kt)("p",null,"In the case of a configuration with an interface converter, the serial bus configuration is determined only on the converter. The evcc configuration then concerns only the section up to the converter."),(0,i.kt)("h2",{id:"physical-connection"},"Physical Connection"),(0,i.kt)("h3",{id:"serial-connection-rs485"},"Serial Connection (RS485)"),(0,i.kt)("p",null,"If the device is directly connected via an RS485 adapter (Modbus RTU), ",(0,i.kt)("inlineCode",{parentName:"p"},"device")," and the serial communication parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"baudrate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"comset")," must be specified according to the device configuration. Please refer to the respective user manual, data sheets, or system settings."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Multiple devices with identical communication parameters can be operated on a serial RS485 bus if each device is assigned a unique Modbus ID. If not all devices on a bus can be configured with uniform communication settings (but with different IDs), splitting into multiple independent bus systems is necessary.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Mixing devices with different serial communication parameters on a bus is not possible and leads to unpredictable communication errors.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'source: modbus\nid: 1\ndevice: /dev/ttyUSB0\nbaudrate: 38400\ncomset: "8E1"\n')),(0,i.kt)("h3",{id:"direct-network-connection"},"Direct Network Connection"),(0,i.kt)("p",null,"If the device is directly connected via a native network connection (Modbus TCP), a ",(0,i.kt)("inlineCode",{parentName:"p"},"uri")," consisting of HOSTNAME:PORT or IP:PORT must be provided:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\nid: 1\nuri: 192.168.0.11:502\n")),(0,i.kt)("h3",{id:"serial-device-via-network-connection-with-interface-converter"},"Serial Device via Network Connection (with Interface Converter)"),(0,i.kt)("p",null,"If a serial device is connected via an intermediate transparent RS485-IP interface converter (without protocol translation), the protocol must also be switched to Modbus RTU over the TCP/IP connection using ",(0,i.kt)("inlineCode",{parentName:"p"},"rtu: true"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\nid: 1\nuri: 192.168.0.10:502\nrtu: true # Modbus RTU over TCP\n")),(0,i.kt)("h2",{id:"predefined-devices"},"Predefined Devices"),(0,i.kt)("p",null,"The integrated predefined device models ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," are identical to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/volkszaehler/mbmd/blob/master/docs/mbmd_run.md#options"},"MBMD"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," ABB       ABB A/B-Series meters\n DDM       DDM18SD\n DZG       DZG Metering GmbH DVH4013 meters\n IEM3000   Schneider Electric iEM3000 series\n INEPRO    Inepro Metering Pro 380\n JANITZA   Janitza meters\n MPM       Bernecker Engineering MPM3PM meters\n ORNO1P    ORNO WE-514 & WE-515\n ORNO1P504 ORNO WE-504\n ORNO3P    ORNO WE-516 & WE-517\n SBC       Saia Burgess Controls ALE3 meters\n SDM       Eastron SDM630/120/72DMv2\n SDM220    Eastron SDM220\n SDM230    Eastron SDM230\n SDM72     Eastron SDM72\n SEMTR     SolarEdge SE-MTR-3Y\n")),(0,i.kt)("p",null,"Any ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," that deviates from these is"),(0,i.kt)("p",null," treated as a ",(0,i.kt)("em",{parentName:"p"},"SunSpec")," device type."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," to define the value to be read from the device. All supported values are predefined in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/volkszaehler/mbmd/blob/master/meters/measurements.go#L28"},"MBMD"),"."),(0,i.kt)("p",null,"In the case of a ",(0,i.kt)("em",{parentName:"p"},"SunSpec"),"-compatible inverter or meter, the values to be read are specified in the format ",(0,i.kt)("inlineCode",{parentName:"p"},"model:[block:]point")," according to the ",(0,i.kt)("em",{parentName:"p"},"SunSpec")," definition. For example, querying the DC power on the second string of a three-phase PV inverter (corresponding to SunSpec Model 103) is done as follows: ",(0,i.kt)("inlineCode",{parentName:"p"},"value: 103:2:W"),"."),(0,i.kt)("p",null,"The device ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," and the slave ID ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," are always required:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\n---\nmodel: sdm\nvalue: Power\nscale: -1 # floating point factor applied to result, e.g. for kW to W conversion\n")),(0,i.kt)("h2",{id:"manual-configuration"},"Manual Configuration"),(0,i.kt)("p",null,"If the Modbus device is not directly supported, or if values different from the predefined models need to be read or written, Modbus registers can also be manually configured:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\n---\nregister:\n  address: 40070\n  type: holding # holding or input\n  decode: int32 # int16|32|64, uint16|32|64, float32|64 and u|int32s + float32s\nscale: -1.0 # floating point factor applied to result, e.g. for kW to W conversion\ntimeout: 2s # timeout, without unit in ns\n")),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"int32s/uint32s")," decodings, the byte order is swapped, which is useful for E3/DC devices."),(0,i.kt)("h3",{id:"writing-registers"},"Writing Registers"),(0,i.kt)("p",null,"Both holding registers and coils can be written. For this, either ",(0,i.kt)("inlineCode",{parentName:"p"},"type: writeholding")," for holding registers or ",(0,i.kt)("inlineCode",{parentName:"p"},"type: writecoil")," for coils must be specified.\n",(0,i.kt)("inlineCode",{parentName:"p"},"type: writeholding")," always writes a 16-bit register (int or bool16). Therefore, for ",(0,i.kt)("inlineCode",{parentName:"p"},"decode"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"uint16")," must always be specified.\n",(0,i.kt)("inlineCode",{parentName:"p"},"type: writecoil")," writes a coil. Specifications for ",(0,i.kt)("inlineCode",{parentName:"p"},"decode")," are ignored."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"source: modbus\n---\nregister:\n  address: 40070\n  type: writeholding # writeholding or writecoil\n")))}u.isMDXComponent=!0}}]);